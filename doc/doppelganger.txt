*doppelganger.txt* *doppelganger* *Doppelganger* *DoppelGanger*

Version: 1.0.0
Author: kaile256 <kaile256acc at gmail.com>
License: MIT license

==============================================================================
CONTENTS						 *doppelganger-contents*

Introduction		|doppelganger-introduction|
Feature			|doppelganger-feature|
Usage			|doppelganger-usage|
  Variable		  |doppelganger-variable|
  Command		  |doppelganger-command|
  Highlight		  |doppelganger-highlight|
Compatibility		|doppelganger-compatibility|

==============================================================================
INTRODUCTION					     *doppelganger-introduction*

Latest version:
https://github.com/kaile256/vim-doppelganger

==============================================================================
FEATURE							  *doppelganger-feature*

ego							      *doppelganger-ego*
	|doppelganger| will automatically update virtualtext
	|g:doppelganger#ego#update_events| after
	ego-feature is enabled via either |:DoppelgangerEgoEnable| or
	|:DoppelgangerEgoToggle|.

	It's automatically enabled as |vim-doppelganger| is loaded unless
	|g:doppelganger#ego#auto_start| is set to 0.

	See also |g:doppelganger#ego#update_events| and
	|g:doppelganger#ego#update_on_CursorMoved|.

==============================================================================
USAGE							    *doppelganger-usage*

------------------------------------------------------------------------------
VARIABLE						 *doppelganger-variable*

g:doppelganger#text#prefix			   *g:doppelganger#text#prefix*
	(default: '◂ <absolute>: ')
	Set in |String|.
	You can use some special keywords: `<absolute>`, `<relative>` and `<size>`.

g:doppelganger#text#suffix			   *g:doppelganger#text#suffix*
	(default: ' [<relative>]')
	Set in |String|.
	See |g:doppelganger#text#prefix| for more detail.

g:doppelganger#text#shim_to_join	     *g:doppelganger#text#shim_to_join*
b:doppelganger_text_shim_to_join	     *b:doppelganger_text_shim_to_join*
	(default: ' ﲖ ')
	Set in |String|.
	When contents within a pair is more than two lines, the characters
	will be inserted into the joined lines in virtualtexts.

g:doppelganger#text#ellipsis			 *g:doppelganger#text#ellipsis*
	(default: ' …')
	Set in |String|.
	Replace omitted text with the value.
	See also |g:dooppelganger#text#max_column_width|.

				     *g:doppelganger#text#compress_whitespaces*
				     *b:doppelganger_text_compress_whitespaces*
g:doppelganger#text#compress_whitespaces
b:doppelganger_text_compress_whitespaces
	(default: 1)
	Set in |Number|.
	if non 0, all the concecutive whitespace characters (<Space> and
	<Tab>) in |Doppelganger|'s virtualtexts will be replaced with a space.

g:doppelganger#text#max_column_width     *g:doppelganger#text#max_column_width*
b:doppelganger_text_max_column_width     *b:doppelganger_text_max_column_width*
	(default: 'max([&cc - 1, &tw, 79])')
	Set in |Number| or in an evaluable string which returns a |Number|.

	|Doppelganger| truncates virtualtexts in the column width.
	The trimmed texts will be replaced with a text defined in
	|g:doppelganger#text#ellipsis|.

	You can set a value up to the buffer's config as the following.
>
	let b:doppelganger_text_max_column_width = max([&tw, 79])
<
	Such scripts should written in a vimrc file under `ftplugin/` or with
	|:autocmd| as your preference.

g:doppelganger#search#pairs			  *g:doppelgangersearch##pairs*
b:doppelganger_search_pairs			  *b:doppelganger_search_pairs*
b:_doppelganger_search_pairs			 *b:_doppelganger_search_pairs*
	(default: {
		\ '_': [
		\	['{', '}[,;]\?'],
		\	['(', ')[,;]\?]',
		\	['\[', '\][,;]\?']
		\	],
		\ })

	Set in |Dict|.
	|Doppelganger| will search pairs to set visualtexts as these variables.

	Each key should represent a filetype; '_' is a special key for the
	rest of filetypes specified in the keys.

	With |b:doppelganger_search_pairs|, you can append your original
	buffer-local config.  It should be |List| in |List| format.

	|Doppelganger| will parse |b:match_words|, if it exists, and will convert
	it with |g:doppelganger#search#pairs| to |b:_doppelganger_search_pairs|.

	To suppress internal caches (|b:_doppelganger_search_pairs|), directly
	overwrite |b:_doppelganger_search_pairs|.  For example, if |doppelganger|
	should appear only after `bar` as a pair of `foo` in a buffer whose
	filetype is `foobar`, write the following script in `ftplugin/foobar.vim`.
>
	let b:_doppelganger_search_pairs = [['foo', 'bar']]

g:doppelganger#search#pairs_reverse	  *g:doppelganger#search#pairs_reverse*
b:doppelganger_search_pairs_reverse	  *b:doppelganger_search_pairs_reverse*
	(default: {
		\ '_': [['\s*do {.*', '\s*}\s*while (.*).*']],
		\ })
	Set in |Dict|.
	Each key should represent a filetype; '_' is a special key for the
	rest of filetypes specified in the keys.

	In spite of |g:doppelganger#search#pairs| and
	|b:doppelganger_search_pairs|, it doesn't take in any other config
	than either |g:doppelganger#search#pairs_reverse| or
	|b:doppelganger_search_pairs_reverse| themselves.  Addtion to that,
	|b:doppelganger_search_pairs_reverse| won't be generated unless you
	set it manually.

g:doppelganger#hl_groups_to_skip	      *g:doppelganger#hl_groups_to_skip*
b:doppelganger_hl_groups_to_skip	      *b:doppelganger_hl_groups_to_skip*
	(default: {
		\ "_": ['Comment', 'String'],
		\ "json": ['jsonKeyword'],
		\ })
	Set in |Dict|.
	Each key should represent a filetype; '_' is a special key for the
	rest of filetypes specified in the keys.

g:doppelganger#ego#disable_autostart	  *g:doppelganger#ego#disable_autostart*
	(default: 0)
	Set in |Number|.
	If not 0, disable auto start when this plugin is loaded.

				        *g:doppelganger#ego#disable_on_buftypes*
g:doppelganger#ego#disable_on_buftypes
	(default: ["help", "prompt", "quickfix", "terminal"])
	Set in |List|.
				       *g:doppelganger#ego#disable_on_filetypes*
g:doppelganger#ego#disable_on_filetypes
	(default: [
		\ "agit",
		\ "defx",
		\ "fugitive",
		\ "git",
		\ "gitcommit",
		\ "gitrebase",
		\ "help",
		\ "markdown",
		\ "netrw",
		\ "pullrequest",
		\ "tagbar",
		\ "text",
		\ "vista",
		\ ])
	Set in |List|.

g:doppelganger#ego#min_range_of_pairs    *g:doppelganger#ego#min_range_of_pairs*
	(default: 4)
	Set in |Number|.
	Minimum range of pairs to set virtualtext.
	Set 0 to show virtualtext even when a pair is in the same line.
	This variable is only for ego-feature.

g:doppelganger#ego#max_offset			 *g:doppelganger#ego#max_offset*
	(default: 3)
	Set in |Number|.
	|doppelganger| will try to set virtualtext in the offset around cursor.

				      *g:doppelganger#ego#update_on_CursorMoved*
g:doppelganger#ego#update_on_CursorMoved
	(default: 1)
	Set in |Number|.
	Set 0 to disable updates on |CursorMoved|.
	It's recommended to use this variable to update on |CursorMoved| because
	it's too frequent to update every time |CursorMoved| is triggered.

g:doppelganger#mapping#fold_suffixes	  *g:doppelganger#mapping#fold_suffixes*
	(default: "voraxcmORAXCM")
	Set in |String|.
	Set suffixes for fold commands.  These mappings are for ego-feature.
	When ego-feature is enabled, update virtualtext of |doppelganger| on
	opening/closing fold via mappings for "zo", "zr", "za" and so on.
	Mapping will not be applied when the target key has been already
	mapped.

------------------------------------------------------------------------------
COMMAND							  *doppelganger-command*

:[range]Doppelganger [{args}]					*:Doppelganger*
	Possible arguments are one of "update", "clear", "ego/enable",
	"ego/disable" and "ego".

	With no argument, it invokes "clear" if any virtual texts are set by
	|vim-doppelganger|; if no virtual texts are set by doppelganger, it
	invokes "update".

	When the argument is only "ego", it invokes proper one of "ego/enable"
	and "ego/disable".

------------------------------------------------------------------------------
HIGHLIGHT						*doppelganger-highlight*

DoppelgangerVirtualText				       *DoppelgangerVirtualText*
	(default: `:hi def link DoppelgangerVirtualText NonText`)
	It affects all the other highlights of |doppelganger| unless they're
	overwritten individually.

DoppelgangerVirtualTextPair			  *DoppelgangerVirtualTextPair*
	(default: `:hi def link DoppelgangerVirtualText`
			`\ DoppelgangerVirtualText`)
	It sets highlight for virtualtexts which created for either
	|g:doppelganger#pairs| or |b:doppelganger_pairs|.

DoppelgangerVirtualTextPairReverse	   *DoppelgangerVirtualTextPairReverse*
	(default: `:hi def link DoppelgangerVirtualText`
			`\ DoppelgangerVirtualText`)
	It sets highlight for virtualtexts which created for either
	|g:doppelganger#pairs_reverse| or |b:doppelganger_pairs_reverse|.

==============================================================================
COMPATIBILITY					    *doppelganger-compatibility*

2021-01-22
* Remove old commands, :DoppelgangerUpdate, :DoppelgangerClear,
  :DoppelgangerToggle, :DoppelgangerEgoEnable :DoppelgangerEgoDisable and
  :DoppelgangerEgoToggle. and just define a command, :Doppelganger.
* Remove g:doppelganger#ego#update_events.

2020-12-10
* Rename g:doppelganger#prefix to g:doppelganger#text#prefix.
* Remove the feature to conceal pattern up to pair and
  g:doppelganger#conceal_the_other_end_pattern which's meaningless now
  that contents in pairs are shown instead.
* Remove doppelganger#min_range_of_pairs which was just confusing with
  g:doppelganger#ego#min_range_of_pairs but has little need.

2020-12-05
* Rename g:doppelganger#pairs to g:doppelganger#search#pairs.
* Rename b:doppelganger_pairs to b:doppelganger_search_pairs.
* Rename b:_doppelganger_pairs to b:_doppelganger_search_pairs.
* Rename g:doppelganger#pairs_reverse to g:doppelganger#search#pairs_reverse.
* Rename b:doppelganger_pairs_reverse to b:doppelganger_search_pairs_reverse.

2020-08-27
* Rename g:doppelganger#skip_hl_groups to g:doppelganger#hl_groups_to_skip
* Rename b:doppelganger_skip_hl_groups to b:doppelganger_hl_groups_to_skip

==============================================================================
vim:ft=help:tw=78:ts=8:sts=8:sw=8:norl:noet:fen:joinspaces
