Describe Components
  Before each
    new
    only!
    let g:doppelganger#cache#disable = v:true
    let g:doppelganger#text#max_column_width = 80

    let g:doppelganger#text#prefix   = []
    let g:doppelganger#text#shim     = []
    let g:doppelganger#text#ellipsis = []
    let g:doppelganger#text#suffix   = []
    let g:doppelganger#text#contents_depth = 1

    let default_context = [
          \ 'int main {',
          \ '}'
          \ ]
    1 pu! = default_context

    let Components = doppelganger#text#components#new(2, 1)
  End

  Context .make_up()
    Context returns expected, completed components

      It as four empty components
        const expected = [[], [], [], []]
        let g:doppelganger#text#prefix   = []
        let g:doppelganger#text#shim     = []
        let g:doppelganger#text#ellipsis = []
        let g:doppelganger#text#suffix   = []
        const actual = Components.make_up()
        Assert Equals(actual, expected)
      End

      It which is composed of chunks filled with simple chars with no hl_groups
        const expected = [[['>', '']], [['+', '']], [['.', '']], [['$', '']]]
        let g:doppelganger#text#prefix   = [['>']]
        let g:doppelganger#text#shim     = [['+']]
        let g:doppelganger#text#ellipsis = [['.']]
        let g:doppelganger#text#suffix   = [['$']]
        const actual = Components.make_up()
        Assert Equals(actual, expected)
      End

    End
  End

  Context .displaywidth()
    It returns 1
      let c = [['+']]
      Assert Equals(Components.displaywidth(c), 1)
    End

    It returns 1 for a unicode
      let c = [['ﲖ']]
      Assert Equals(Components.displaywidth(c), 1)
    End

    It returns 2 for an ambiguous width char
      let c = [['あ']]
      Assert Equals(Components.displaywidth(c), 2)
    End

  End

  Context .get_fillable_width()

    Context with no decorations
      Before each
        let g:doppelganger#text#prefix   = []
        let g:doppelganger#text#shim     = []
        let g:doppelganger#text#ellipsis = []
        let g:doppelganger#text#suffix   = []
        let g:doppelganger#text#contents_depth = 1
      End

      It returns a fillable width
        " Reduce 1 for a space is inserted between any an actual text and virtual
        " text.
        call Components.make_up()
        const len_fillable = Components.get_fillable_width()

        const max_col_width = g:doppelganger#text#max_column_width
        const len_actualtext = 1 " The length of `}`
        const len_reserved = len_actualtext + 1
        const len_expected = max_col_width - len_reserved
        Assert Equals(len_fillable, len_expected)
      End

    End
  End
End
