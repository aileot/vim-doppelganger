Describe :DoppelgangerUpdate
  Before all
    DoppelgangerEgoDisable
    new
  End

  Before each
    DoppelgangerClear
  End

  Context in a cpp-like file
    Before each
      call setline(1, ['int main() {', '}'])
      let g:doppelganger#conceal_the_other_end_pattern = 0
      DoppelgangerUpdate
    End

    After each
      DoppelgangerClear
    End

    It shows a virtualtext at least at this test
      let assert = themis#helper('assert')
      let virtualtexts = GetVirtualTexts()[2]
      Assert assert.not_empty(virtualtexts)
    End

    It shows the line that contains the other end of pair which ends current line
      let virtualtexts = GetVirtualTexts()[2]
      let prefix = get(g:, 'doppelganger#prefix', '>')
      let expected_virtualtext = '^'. prefix .'int main() {$'
      Assert Match(virtualtexts[0], expected_virtualtext)
    End

    It conceals pattern to the other end of pairs
      let g:doppelganger#conceal_the_other_end_pattern = 1
      DoppelgangerUpdate
      let virtualtexts = GetVirtualTexts()[2]
      let prefix = get(g:, 'doppelganger#prefix', '>')
      let expected_virtualtext = '^'. prefix .'int main()\s*$'
      Assert Match(virtualtexts[0], expected_virtualtext)
    End
  End

  Context with reverse search
    Before each
      call setline(1, ['do {', '} while (foo);'])
      DoppelgangerUpdate
    End
    It shows while-statement in a virtual text
      let virtualtexts = GetVirtualTexts()[1] " after `do {`
      let prefix = get(g:, 'doppelganger#prefix', '>')
      let expected_virtualtext = prefix .'} while (foo);'
      Assert Equals(virtualtexts[0], expected_virtualtext)
    End
  End

  Context with magic patterns
    Before each
      call setline(1, ['function! foo()', 'endfunction'])
      let b:_doppelganger_pairs = []
    End

    It gets expected pair without any magic
      let b:doppelganger_pairs = [['fun.*', 'endf.*']]
    End

    It gets expected pair with '\v'
      let b:doppelganger_pairs = [['\vfun.*', '\vendf.*']]
    End
    It gets expected pair with '\V'
      let b:doppelganger_pairs = [['\Vfun\.\*', '\Vendf\.\*']]
    End
    It gets expected pair with '\m'
      let b:doppelganger_pairs = [['\mfun.*', '\mendf.*']]
    End
    It gets expected pair with '\M'
      let b:doppelganger_pairs = [['\Mfun\.\*', '\Mendf\.\*']]
    End

    It gets expected pair with '\v' with '$'
      let b:doppelganger_pairs = [['\vfun.*', '\vendf.*$']]
    End
    It gets expected pair with '\V' with '$'
      let b:doppelganger_pairs = [['\Vfun\.\*', '\Vendf\.\*\$']]
    End
    It gets expected pair with '\m' with '$'
      let b:doppelganger_pairs = [['\mfun.*', '\mendf.*$']]
    End
    It gets expected pair with '\M' with '$'
      let b:doppelganger_pairs = [['\Mfun\.\*', '\Mendf\.\*$']]
    End

    After each
      DoppelgangerUpdate
      let virtualtexts = GetVirtualTexts()
      Assert len(virtualtexts) > 0
    End
  End
End
