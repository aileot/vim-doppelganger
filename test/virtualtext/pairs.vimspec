Describe :DoppelgangerUpdate
  Before all
    DoppelgangerEgoDisable
  End

  Before each
    DoppelgangerClear
  End

  Context in a cpp-like file
    Before each
      new
      call setline(1, ['int main() {', '}'])
      DoppelgangerUpdate
    End

    After each
      DoppelgangerClear
    End

    It shows a virtualtext at least at this test
      let assert = themis#helper('assert')
      let virtualtexts = nvim_buf_get_virtual_text(0, 1)
      Assert assert.not_empty(virtualtexts)
    End

    It shows the line that contains the other end of pair which ends current line
      let virtualtexts = nvim_buf_get_virtual_text(0, 1)[0]
      let prefix = get(g:, 'doppelganger#prefix', '>')
      let expected_virtualtext = '^'. prefix .'int main()\s*$'
      let expected_virtualtext = 'main'
      Assert Match(virtualtexts[0], expected_virtualtext)
    End
  End
End
